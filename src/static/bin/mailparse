#!/usr/bin/env python3
import argparse
import json
import sys
from collections import OrderedDict
from email.parser import BytesHeaderParser
from email.utils import getaddresses
from email.header import decode_header


def get_parser():
    p = argparse.ArgumentParser()
    p.add_argument("--header", nargs="+", type=str)
    p.add_argument(
        "--mail-address",
        metavar="MODE",
        choices=["realname", "realname-or-address", "address"],
        help="Consider that the header value is an email address,"
        " and transforms it according to MODE",
    )
    p.add_argument("--output", choices=["json", "values", "header"], default="values")
    return p


def out(data, args):
    if args.output == "json":
        json.dump(data, sys.stdout, indent=2)
    elif args.output == "values":
        for h in data:
            for v in data[h]:
                print(v)
    elif args.output == "header":
        for h in data:
            for v in data[h]:
                print("%s: %s" % (h, v))


def really_decode_header(value) -> str:
    '''
    given the value of an header, returns a string properly decoded

    keep in mind, in fact, that headers are never directly encoded
    because the email must be entirely ASCII compatible
    '''
    values = decode_header(value)
    def decode_string(raw, encoding):
        if type(raw) is str:
            return raw
        if hasattr(raw, 'decode'):
            if encoding is None:
                encoding = 'ascii'
            return raw.decode(encoding)
        assert type(raw) is str
        return raw
    return ''.join(decode_string(raw, encoding) for raw, encoding in values)


def main():
    ap = get_parser()
    args = ap.parse_args()

    mail_parser = BytesHeaderParser()
    header = mail_parser.parse(sys.stdin.buffer)

    outdata = dict(header)
    if args.header:
        outdata = OrderedDict()
        for h in args.header:
            values = [really_decode_header(val) for val in
                    header.get_all(h, [])]
            if values:
                outdata[h] = values
        if args.mail_address:
            for h in outdata:
                parsed = getaddresses(outdata[h])
                if args.mail_address == "address":
                    outdata[h] = [add for name, add in parsed]
                if args.mail_address == "realname":
                    outdata[h] = [name for name, add in parsed]
                if args.mail_address == "realname-or-address":
                    outdata[h] = [name if name else add for name, add in parsed]

    out(outdata, args)


if __name__ == "__main__":
    main()

#!/usr/bin/env python3
# coding=utf-8
#
# Copyright (C) 2012 by Suvayu Ali
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""This program serves as an address book based on notmuch queries.

`nbook' allows the user to query a notmuch database for email
addresses.  It looks in the to:, from: and cc: headers of the email
messages for matches.  Unique matching email addresses are printed on
the terminal.  The purpose of the program is to serve as a search
based address book.  It is designed to replicate the abook program,
for use with text based email clients like mutt.

The underlying idea to use search queries as an address book was
inspired by Gmail.  The idea to use email indexers (like notmuch) to
extract the email addresses was conceived by Dirk-Jan C. Binnema,
author of mu (a notmuch inspired email indexer) and mu4e (an Emacs
based email client for mu).  Since the inspiration was the Gmail
interface, the name and email matching is done case-insensitively.

Usage with Mutt: To use with Mutt, set $query_command to "nbook '%s'"

Note: `nbook' requires Python 2.7 or higher as it depends on argparse

Author: Suvayu Ali

"""

# this is for python3 compatibility
from __future__ import print_function, absolute_import, unicode_literals

# Please note: this code is intended to be compatible with python2.7, python3.x
# and python2.6 (if you manually install the "argparse" module)


import sys
import argparse
from notmuch import Database, Query, message
from notmuch.errors import NullPointerError


def get_parser():
    optparser = argparse.ArgumentParser(
        description=__doc__,
        epilog="Example: nbook -p \"$(date --date 'now -180 days' +%%s)..$(date +%%s) and\" john",
    )
    optparser.formatter_class = argparse.RawDescriptionHelpFormatter
    optparser.add_argument(
        "-p",
        "--prefix",
        dest="prefix",
        metavar="QUERY",
        default="",
        help="Add a prefix to the query",
    )
    optparser.add_argument(
        "querystr", nargs="+", help="Query string, matched agains address headers"
    )
    return optparser


options = get_parser().parse_args()
querystr = " ".join(options.querystr)


class AddressHeaders(object):
    """This class collects address headers from notmuch searches.

    It accepts either a single message from a search result or
    messages in any iterable container, e.g. a list.

    """

    def __init__(self, msgs, query=""):
        self.__query__ = query
        try:
            frlist = []
            tolist = []
            cclist = []
            for msg in msgs:
                try:
                    frlist += [msg.get_header("from")]
                    tolist += [msg.get_header("to")]
                    cclist += [msg.get_header("cc")]
                except NullPointerError:
                    pass

            self.__fromhdr__ = ",".join(frlist)
            self.__tohdr__ = ",".join(tolist)
            self.__cchdr__ = ",".join(cclist)

        except TypeError:
            if isinstance(msgs, message.Message):
                msg = msgs
                self.__fromhdr__ = msg.get_header("from")
                self.__tohdr__ = msg.get_header("to")
                self.__cchdr__ = msg.get_header("cc")
            else:
                raise TypeError(
                    "`msgs' should be notmuch.message.Message or a container"
                )

    def __filter_addrs__(self, query, addr):
        """Filter function to select messages matching pattern."""
        qtokens = query.lower().split()
        addrstr = " ".join(addr).lower()
        count = 0
        # FIXME: faster algorithm
        for token in qtokens:
            if token in addrstr:
                count += 1
        return count == len(qtokens)

    def __uniquify_addrs__(self, addrs):
        # TODO: rank by number of appearances
        addrs.sort()
        if addrs:
            last = addrs[-1]
            # FIXME: cleaner & faster code
            for i in range(len(addrs) - 2, -1, -1):
                if last[0].lower() == addrs[i][0].lower():
                    del addrs[i]
                else:
                    last = addrs[i]
            # FIXME: why does the line below not work
            # return list(set(addrs))
        return addrs

    def to_mutt_out(self):
        addrs = tuple(self.get_addrs())
        out = "%d email addresses found\n" % len(addrs)
        out += "\n".join(addrs)
        return out

    def __getaddrshdr__(self, hdr="from"):
        if hdr == "from":
            addrs = [addr.rsplit(" ", 1) for addr in self.__fromhdr__.split(",")]
        elif hdr == "to":
            addrs = [addr.rsplit(" ", 1) for addr in self.__tohdr__.split(",")]
        elif hdr == "cc":
            addrs = [addr.rsplit(" ", 1) for addr in self.__cchdr__.split(",")]
        return [[addr[-1], addr[0].strip(' "')] for addr in addrs]

    def fromaddrs(self):
        """Return a list with all the from addresses."""
        return self.__getaddrshdr__("from")

    def toaddrs(self):
        """Return a list with all the to addresses."""
        return self.__getaddrshdr__("to")

    def ccaddrs(self):
        """Return a list with all the cc addresses."""
        return self.__getaddrshdr__("cc")

    def add_msg(self, msg):
        """Add a message to the address header collection."""
        self.__fromhdr__ += "," + msg.get_header("from")
        self.__tohdr__ += "," + msg.get_header("to")
        self.__cchdr__ += "," + msg.get_header("cc")

    def find_addrs(self, query=""):
        """Return all matching addresses in one list."""
        addrs = self.fromaddrs()
        addrs += self.toaddrs()
        addrs += self.ccaddrs()
        if query == "":
            query = self.__query__
        maddrs = [addr for addr in addrs if self.__filter_addrs__(query, addr)]
        return self.__uniquify_addrs__(maddrs)
        # FIXME: Why does this not work?
        # return list(set((maddrs)))

    def get_addrs(self, fmtstr="%s\t%s", query=""):
        """Print formatted addresses"""
        if query == "":
            query = self.__query__
        addrs = self.find_addrs(query)
        if not addrs:
            addrs = []
        for addr in addrs:
            yield (fmtstr % (addr[0].strip("<>"), addr[1]))


# End of class definition


# Search
with Database() as db:
    query = Query(db, '{1} (from:"{0}" or to:"{0}")'.format(querystr, options.prefix))
    msgs = query.search_messages()
    addresses = AddressHeaders(msgs, querystr).to_mutt_out()
# workaround a bug https://notmuchmail.org/pipermail/notmuch/2016/021622.html
del db

buf = sys.stdout
buf = getattr(buf, "buffer", buf)
buf.write(addresses.encode("utf-8"))
buf.write(b"\n")
buf.close()

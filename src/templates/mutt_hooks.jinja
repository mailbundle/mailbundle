send-hook . 'reset pgp_autoencrypt'
send-hook . 'my_hdr From: unspecified@unspecified'
send-hook . 'unset signature'

{# generate ONE rule #}
{%- macro mutt_hook_rule(rule, val) -%}
{%- if rule == 'from' -%}
'my_hdr From: {{val}}'
{% endif -%}
{%- if rule == 'encrypt' or rule == 'sign'-%}
'set crypt_auto{{rule}}={{ 'yes' if val else 'no' }}'
{%- elif rule == 'signature' -%}
'set signature="{{confdir}}/signatures/{{val}}"'
{% endif %}
{%- endmacro -%} {# mutt_hook_rule #}

{%- macro group_addresses(name, group) -%}
{%- if 'to' in group -%}
group -group {{name}} -addr {{ group.to | join(" ") }}
{% endif %}
{%- if 'to_domains' in group -%}
{% for dom in group.to_domains -%}
group -group {{name}} -rx '.*@{{dom}}$'
{% endfor %}
{% endif %}
{%- if 'pgp_validity' in group -%}
group -group {{name}} -addr {{gpg_valid(group.pgp_validity) | join(" ")}}
{% endif %}
{%- endmacro -%}

##########
## groups
##########
{% for name, group in groups.items()|sort(attribute='0') -%}
{{ group_addresses(name, group)}}
{% endfor %}

##########
## hooks: set action when sending mail to groups
##########
{% for hook in hooks|sort(attribute='group') -%}
{%- if 'rules' in hook -%}
{% for rule, val in hook.rules.items()|sort(attribute='0') %}
send-hook '%C {{hook.group}}' {{ mutt_hook_rule(rule, val) }}
{%- endfor -%} {# rules #}
{%- endif -%}
{% endfor -%} {# hooks #}

##########
## score: change score based on group settings
##########
unscore *
score ~A 10
{% for hook in hooks|sort(attribute='group') -%}
{% if 'score' in hook -%}
score "%f {{hook.group}}" {{hook.score}}
score "%C {{hook.group}}" {{hook.score}}
{%- endif %}
{% endfor -%}
score "~p" +3

{# vim: set ft=jinja: #}
# vim: set ft=muttrc:
